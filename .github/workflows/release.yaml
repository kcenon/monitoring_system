name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Monitoring System ${{ steps.get_version.outputs.version }}
          body: |
            # Monitoring System ${{ steps.get_version.outputs.version }}
            
            ## Changes
            - See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details
            
            ## Installation
            Download the appropriate package for your platform below.
          draft: false
          prerelease: false

  build-release:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux-x64
            artifact: monitoring-system-linux-x64
          - os: windows-2022
            name: windows-x64
            artifact: monitoring-system-windows-x64
          - os: macos-latest
            name: macos-universal
            artifact: monitoring-system-macos-universal
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup build environment (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build g++

      - name: Setup build environment (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake ninja

      - name: Setup build environment (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: '17.0'

      - name: Build Release (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DMONITORING_BUILD_TESTS=OFF \
            -DMONITORING_BUILD_EXAMPLES=ON \
            -DCMAKE_INSTALL_PREFIX=../install
          cmake --build . --parallel
          cmake --install .

      - name: Build Release (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          mkdir build
          cd build
          cmake .. `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DCMAKE_BUILD_TYPE=Release `
            -DMONITORING_BUILD_TESTS=OFF `
            -DMONITORING_BUILD_EXAMPLES=ON `
            -DCMAKE_INSTALL_PREFIX=../install
          cmake --build . --config Release --parallel
          cmake --install . --config Release

      - name: Package Release
        shell: bash
        run: |
          cd install
          if [ "${{ runner.os }}" = "Windows" ]; then
            7z a ../${{ matrix.artifact }}.zip .
          else
            tar czf ../${{ matrix.artifact }}.tar.gz .
          fi

      - name: Upload Release Asset (tar.gz)
        if: runner.os != 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact }}.tar.gz
          asset_name: ${{ matrix.artifact }}-${{ needs.create-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (zip)
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact }}.zip
          asset_name: ${{ matrix.artifact }}-${{ needs.create-release.outputs.version }}.zip
          asset_content_type: application/zip

  create-packages:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build g++ dpkg-dev rpm

      - name: Build DEB package
        run: |
          mkdir -p build-deb
          cd build-deb
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DMONITORING_BUILD_TESTS=OFF \
            -DCPACK_GENERATOR=DEB
          cmake --build . --parallel
          cpack -G DEB

      - name: Build RPM package
        run: |
          mkdir -p build-rpm
          cd build-rpm
          cmake .. \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DMONITORING_BUILD_TESTS=OFF \
            -DCPACK_GENERATOR=RPM
          cmake --build . --parallel
          cpack -G RPM

      - name: Upload DEB package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./build-deb/monitoring-system*.deb
          asset_name: monitoring-system-${{ needs.create-release.outputs.version }}.deb
          asset_content_type: application/x-debian-package

      - name: Upload RPM package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./build-rpm/monitoring-system*.rpm
          asset_name: monitoring-system-${{ needs.create-release.outputs.version }}.rpm
          asset_content_type: application/x-rpm