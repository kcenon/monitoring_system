name: Integration Tests

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  integration-tests:
    name: ${{ matrix.os }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
        include:
          - os: ubuntu-latest
            install_deps: |
              sudo apt-get update
              sudo apt-get install -y ninja-build lcov
          - os: macos-latest
            install_deps: |
              brew install ninja lcov

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Checkout common_system
        uses: actions/checkout@v4
        with:
          repository: kcenon/common_system
          path: common_system
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and install common_system
        run: |
          cd common_system
          cmake -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="${GITHUB_WORKSPACE}/common_system_install"
          cmake --build build --parallel
          cmake --install build
          cd ..

      - name: Install dependencies
        run: ${{ matrix.install_deps }}

      - name: Install Google Test
        run: |
          git clone https://github.com/google/googletest.git -b release-1.12.1
          cd googletest
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          sudo cmake --build . --target install

      - name: Configure CMake
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_PREFIX_PATH="${GITHUB_WORKSPACE}/common_system_install" \
            -DMONITORING_BUILD_INTEGRATION_TESTS=ON \
            -DENABLE_COVERAGE=${{ matrix.build_type == 'Debug' && 'ON' || 'OFF' }}

      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }} -j4

      - name: Run Integration Tests
        working-directory: build
        run: ctest -C ${{ matrix.build_type }} --output-on-failure --verbose

      - name: Generate Coverage Report
        if: matrix.build_type == 'Debug'
        working-directory: build
        run: |
          lcov --capture --directory . --output-file coverage.info --ignore-errors mismatch --ignore-errors inconsistent --ignore-errors negative --ignore-errors format --ignore-errors unsupported
          lcov --remove coverage.info '/usr/*' '*/tests/*' '*/googletest/*' '*/common_system_install/*' '/Applications/Xcode*/**' '/usr/local/include/*' --output-file coverage_filtered.info --ignore-errors unused --ignore-errors inconsistent
          lcov --list coverage_filtered.info --ignore-errors inconsistent

      - name: Upload Coverage to Codecov
        if: matrix.build_type == 'Debug'
        uses: codecov/codecov-action@v4
        with:
          files: build/coverage_filtered.info
          flags: integration-tests
          name: ${{ matrix.os }}-integration
          fail_ci_if_error: false

      - name: Generate Coverage HTML
        if: matrix.build_type == 'Debug'
        working-directory: build
        run: |
          genhtml coverage_filtered.info --output-directory coverage_html --ignore-errors source

      - name: Upload Coverage HTML
        if: matrix.build_type == 'Debug'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.os }}
          path: build/coverage_html

      - name: Performance Baseline Validation
        if: matrix.build_type == 'Release'
        working-directory: build
        run: |
          ./integration_tests/monitoring_integration_tests --gtest_filter="*Performance*" || true

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.build_type }}
          path: build/Testing/Temporary/

  summary:
    name: Integration Test Summary
    runs-on: ubuntu-latest
    needs: integration-tests
    if: always()

    steps:
      - name: Summary
        run: |
          echo "Integration tests completed"
          echo "Check individual job results for details"
